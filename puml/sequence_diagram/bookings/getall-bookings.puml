@startuml getall-bookings

header Booking Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Booking (Get all)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:campgrounds" as routerCampgrounds
participant "<<router>>\n:bookings" as routerBookings
participant "<<middleware>>\n:auth" as middlewareAuth
participant "<<controllers>>\n:bookings" as controllersBookings
participant "<<model>>\n:Booking" as modelBooking
database "<<MongoDB>>\n:bookings" as BookingsDatabase
alt BookingRoute
    client->server ++:req.get('/bookings')
    server->routerBookings ++:app.use('/bookings', bookings)

else Rerouting From CampgroundRoute
    client -> server --:req.get('/campgrounds/:campgroundId/bookings')
    server->routerCampgrounds ++:app.use('/campgrounds', campgrounds)
    routerCampgrounds -> routerBookings :router.use('/:campgroundId/bookings', bookingRouter)
end
routerBookings -> middlewareAuth ++:protect()
middlewareAuth -> controllersBookings ++:getBookings()

alt Not Admin
    controllersBookings->modelBooking ++:Booking.find({user:req.user.id}).populate({path:'campground',select:'name adddress tel'})
else Admin
    alt Has campID
        controllersBookings->modelBooking: Booking.find({campground:req.params.campgroundId}).populate({path:'campground',select:'name address tel'})
    else Has no campID
        controllersBookings->modelBooking: find().populate({path:'campground',select:'name address tel'})
    end
end
modelBooking ->BookingsDatabase ++: BookingSchema
BookingsDatabase --> modelBooking --: Booking
controllersBookings <-- modelBooking --:Booking
controllersBookings->client --:response

@enduml